/**
 * Test `over*OrEmpty` methods.
 */

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_for_over_X_or_empty.py
// Do NOT edit or append.

import * as TestCommonJsonization from "./commonJsonization";

test("Extension.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalExtension();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Extension"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Extension.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalExtension();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Extension"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Extension.overRefersToOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalExtension();

  if (instance.refersTo === null) {
    throw new Error(
      "Unexpected " + "refersTo === null " + "in the maximal example of " + "Extension"
    );
  }

  let count = 0;
  for (const _ of instance.overRefersToOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.refersTo.length);
});

test("Extension.overRefersToOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalExtension();

  if (instance.refersTo !== null) {
    throw new Error(
      "Unexpected " + "refersTo !== null " + "in the minimal example of " + "Extension"
    );
  }

  let count = 0;
  for (const _ of instance.overRefersToOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AdministrativeInformation.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAdministrativeInformation();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "AdministrativeInformation"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("AdministrativeInformation.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAdministrativeInformation();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "AdministrativeInformation"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Qualifier.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalQualifier();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Qualifier"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Qualifier.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalQualifier();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Qualifier"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("AssetAdministrationShell.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("AssetAdministrationShell.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("AssetAdministrationShell.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("AssetAdministrationShell.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overSubmodelsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  if (instance.submodels === null) {
    throw new Error(
      "Unexpected " +
        "submodels === null " +
        "in the maximal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.submodels.length);
});

test("AssetAdministrationShell.overSubmodelsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  if (instance.submodels !== null) {
    throw new Error(
      "Unexpected " +
        "submodels !== null " +
        "in the minimal example of " +
        "AssetAdministrationShell"
    );
  }

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

// The maximal example of AssetInformation contains no specificAssetIds,
// so we can not generate the corresponding test case
// "AssetInformation.overSpecificAssetIdsOrEmpty non-default".

test("AssetInformation.overSpecificAssetIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetInformation();

  if (instance.specificAssetIds !== null) {
    throw new Error(
      "Unexpected " +
        "specificAssetIds !== null " +
        "in the minimal example of " +
        "AssetInformation"
    );
  }

  let count = 0;
  for (const _ of instance.overSpecificAssetIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SpecificAssetId.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSpecificAssetId();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "SpecificAssetId"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("SpecificAssetId.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSpecificAssetId();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "SpecificAssetId"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " + "extensions === null " + "in the maximal example of " + "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Submodel.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " + "extensions !== null " + "in the minimal example of " + "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Submodel.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Submodel.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Submodel.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " + "qualifiers === null " + "in the maximal example of " + "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Submodel.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " + "qualifiers !== null " + "in the minimal example of " + "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Submodel.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overSubmodelElementsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  if (instance.submodelElements === null) {
    throw new Error(
      "Unexpected " +
        "submodelElements === null " +
        "in the maximal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overSubmodelElementsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.submodelElements.length);
});

test("Submodel.overSubmodelElementsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  if (instance.submodelElements !== null) {
    throw new Error(
      "Unexpected " +
        "submodelElements !== null " +
        "in the minimal example of " +
        "Submodel"
    );
  }

  let count = 0;
  for (const _ of instance.overSubmodelElementsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("RelationshipElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("RelationshipElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("RelationshipElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("RelationshipElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("RelationshipElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("RelationshipElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "RelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("SubmodelElementList.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("SubmodelElementList.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("SubmodelElementList.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("SubmodelElementList.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("SubmodelElementList.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("SubmodelElementList.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overValueOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  if (instance.value === null) {
    throw new Error(
      "Unexpected " +
        "value === null " +
        "in the maximal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.value.length);
});

test("SubmodelElementList.overValueOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  if (instance.value !== null) {
    throw new Error(
      "Unexpected " +
        "value !== null " +
        "in the minimal example of " +
        "SubmodelElementList"
    );
  }

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("SubmodelElementCollection.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("SubmodelElementCollection.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("SubmodelElementCollection.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("SubmodelElementCollection.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("SubmodelElementCollection.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("SubmodelElementCollection.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overValueOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  if (instance.value === null) {
    throw new Error(
      "Unexpected " +
        "value === null " +
        "in the maximal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.value.length);
});

test("SubmodelElementCollection.overValueOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  if (instance.value !== null) {
    throw new Error(
      "Unexpected " +
        "value !== null " +
        "in the minimal example of " +
        "SubmodelElementCollection"
    );
  }

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " + "extensions === null " + "in the maximal example of " + "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Property.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " + "extensions !== null " + "in the minimal example of " + "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Property.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Property.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Property.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " + "qualifiers === null " + "in the maximal example of " + "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Property.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " + "qualifiers !== null " + "in the minimal example of " + "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Property.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Property"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("MultiLanguageProperty.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("MultiLanguageProperty.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("MultiLanguageProperty.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("MultiLanguageProperty.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("MultiLanguageProperty.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("MultiLanguageProperty.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overValueOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  if (instance.value === null) {
    throw new Error(
      "Unexpected " +
        "value === null " +
        "in the maximal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.value.length);
});

test("MultiLanguageProperty.overValueOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  if (instance.value !== null) {
    throw new Error(
      "Unexpected " +
        "value !== null " +
        "in the minimal example of " +
        "MultiLanguageProperty"
    );
  }

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " + "extensions === null " + "in the maximal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Range.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " + "extensions !== null " + "in the minimal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " + "displayName === null " + "in the maximal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Range.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " + "displayName !== null " + "in the minimal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " + "description === null " + "in the maximal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Range.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " + "description !== null " + "in the minimal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Range.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " + "qualifiers === null " + "in the maximal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Range.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " + "qualifiers !== null " + "in the minimal example of " + "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Range.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Range"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("ReferenceElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("ReferenceElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("ReferenceElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("ReferenceElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("ReferenceElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("ReferenceElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "ReferenceElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " + "extensions === null " + "in the maximal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Blob.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " + "extensions !== null " + "in the minimal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " + "displayName === null " + "in the maximal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Blob.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " + "displayName !== null " + "in the minimal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " + "description === null " + "in the maximal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Blob.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " + "description !== null " + "in the minimal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Blob.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " + "qualifiers === null " + "in the maximal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Blob.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " + "qualifiers !== null " + "in the minimal example of " + "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Blob.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Blob"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " + "extensions === null " + "in the maximal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("File.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " + "extensions !== null " + "in the minimal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " + "displayName === null " + "in the maximal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("File.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " + "displayName !== null " + "in the minimal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " + "description === null " + "in the maximal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("File.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " + "description !== null " + "in the minimal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "File"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("File.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "File"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " + "qualifiers === null " + "in the maximal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("File.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " + "qualifiers !== null " + "in the minimal example of " + "File"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "File"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("File.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "File"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("AnnotatedRelationshipElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("AnnotatedRelationshipElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("AnnotatedRelationshipElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("AnnotatedRelationshipElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("AnnotatedRelationshipElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("AnnotatedRelationshipElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overAnnotationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  if (instance.annotations === null) {
    throw new Error(
      "Unexpected " +
        "annotations === null " +
        "in the maximal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overAnnotationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.annotations.length);
});

test("AnnotatedRelationshipElement.overAnnotationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  if (instance.annotations !== null) {
    throw new Error(
      "Unexpected " +
        "annotations !== null " +
        "in the minimal example of " +
        "AnnotatedRelationshipElement"
    );
  }

  let count = 0;
  for (const _ of instance.overAnnotationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " + "extensions === null " + "in the maximal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Entity.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " + "extensions !== null " + "in the minimal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " + "displayName === null " + "in the maximal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Entity.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " + "displayName !== null " + "in the minimal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " + "description === null " + "in the maximal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Entity.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " + "description !== null " + "in the minimal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Entity.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " + "qualifiers === null " + "in the maximal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Entity.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " + "qualifiers !== null " + "in the minimal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Entity.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overStatementsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  if (instance.statements === null) {
    throw new Error(
      "Unexpected " + "statements === null " + "in the maximal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overStatementsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.statements.length);
});

test("Entity.overStatementsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.statements !== null) {
    throw new Error(
      "Unexpected " + "statements !== null " + "in the minimal example of " + "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overStatementsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

// The maximal example of Entity contains no specificAssetIds,
// so we can not generate the corresponding test case
// "Entity.overSpecificAssetIdsOrEmpty non-default".

test("Entity.overSpecificAssetIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  if (instance.specificAssetIds !== null) {
    throw new Error(
      "Unexpected " +
        "specificAssetIds !== null " +
        "in the minimal example of " +
        "Entity"
    );
  }

  let count = 0;
  for (const _ of instance.overSpecificAssetIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("BasicEventElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("BasicEventElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("BasicEventElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("BasicEventElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("BasicEventElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("BasicEventElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "BasicEventElement"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Operation.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Operation.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Operation.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Operation.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Operation.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Operation.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overInputVariablesOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.inputVariables === null) {
    throw new Error(
      "Unexpected " +
        "inputVariables === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overInputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.inputVariables.length);
});

test("Operation.overInputVariablesOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.inputVariables !== null) {
    throw new Error(
      "Unexpected " +
        "inputVariables !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overInputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overOutputVariablesOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.outputVariables === null) {
    throw new Error(
      "Unexpected " +
        "outputVariables === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overOutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.outputVariables.length);
});

test("Operation.overOutputVariablesOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.outputVariables !== null) {
    throw new Error(
      "Unexpected " +
        "outputVariables !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overOutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overInoutputVariablesOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  if (instance.inoutputVariables === null) {
    throw new Error(
      "Unexpected " +
        "inoutputVariables === null " +
        "in the maximal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overInoutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.inoutputVariables.length);
});

test("Operation.overInoutputVariablesOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  if (instance.inoutputVariables !== null) {
    throw new Error(
      "Unexpected " +
        "inoutputVariables !== null " +
        "in the minimal example of " +
        "Operation"
    );
  }

  let count = 0;
  for (const _ of instance.overInoutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("Capability.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("Capability.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("Capability.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  if (instance.supplementalSemanticIds === null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds === null " +
        "in the maximal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.supplementalSemanticIds.length);
});

test("Capability.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  if (instance.supplementalSemanticIds !== null) {
    throw new Error(
      "Unexpected " +
        "supplementalSemanticIds !== null " +
        "in the minimal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  if (instance.qualifiers === null) {
    throw new Error(
      "Unexpected " +
        "qualifiers === null " +
        "in the maximal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.qualifiers.length);
});

test("Capability.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  if (instance.qualifiers !== null) {
    throw new Error(
      "Unexpected " +
        "qualifiers !== null " +
        "in the minimal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("Capability.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "Capability"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  if (instance.extensions === null) {
    throw new Error(
      "Unexpected " +
        "extensions === null " +
        "in the maximal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.extensions.length);
});

test("ConceptDescription.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  if (instance.extensions !== null) {
    throw new Error(
      "Unexpected " +
        "extensions !== null " +
        "in the minimal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  if (instance.displayName === null) {
    throw new Error(
      "Unexpected " +
        "displayName === null " +
        "in the maximal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.displayName.length);
});

test("ConceptDescription.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  if (instance.displayName !== null) {
    throw new Error(
      "Unexpected " +
        "displayName !== null " +
        "in the minimal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  if (instance.description === null) {
    throw new Error(
      "Unexpected " +
        "description === null " +
        "in the maximal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.description.length);
});

test("ConceptDescription.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  if (instance.description !== null) {
    throw new Error(
      "Unexpected " +
        "description !== null " +
        "in the minimal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  if (instance.embeddedDataSpecifications === null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications === null " +
        "in the maximal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.embeddedDataSpecifications.length);
});

test("ConceptDescription.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  if (instance.embeddedDataSpecifications !== null) {
    throw new Error(
      "Unexpected " +
        "embeddedDataSpecifications !== null " +
        "in the minimal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overIsCaseOfOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  if (instance.isCaseOf === null) {
    throw new Error(
      "Unexpected " +
        "isCaseOf === null " +
        "in the maximal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overIsCaseOfOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.isCaseOf.length);
});

test("ConceptDescription.overIsCaseOfOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  if (instance.isCaseOf !== null) {
    throw new Error(
      "Unexpected " +
        "isCaseOf !== null " +
        "in the minimal example of " +
        "ConceptDescription"
    );
  }

  let count = 0;
  for (const _ of instance.overIsCaseOfOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Environment.overAssetAdministrationShellsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEnvironment();

  if (instance.assetAdministrationShells === null) {
    throw new Error(
      "Unexpected " +
        "assetAdministrationShells === null " +
        "in the maximal example of " +
        "Environment"
    );
  }

  let count = 0;
  for (const _ of instance.overAssetAdministrationShellsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.assetAdministrationShells.length);
});

test("Environment.overAssetAdministrationShellsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  if (instance.assetAdministrationShells !== null) {
    throw new Error(
      "Unexpected " +
        "assetAdministrationShells !== null " +
        "in the minimal example of " +
        "Environment"
    );
  }

  let count = 0;
  for (const _ of instance.overAssetAdministrationShellsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Environment.overSubmodelsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEnvironment();

  if (instance.submodels === null) {
    throw new Error(
      "Unexpected " +
        "submodels === null " +
        "in the maximal example of " +
        "Environment"
    );
  }

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.submodels.length);
});

test("Environment.overSubmodelsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  if (instance.submodels !== null) {
    throw new Error(
      "Unexpected " +
        "submodels !== null " +
        "in the minimal example of " +
        "Environment"
    );
  }

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Environment.overConceptDescriptionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalEnvironment();

  if (instance.conceptDescriptions === null) {
    throw new Error(
      "Unexpected " +
        "conceptDescriptions === null " +
        "in the maximal example of " +
        "Environment"
    );
  }

  let count = 0;
  for (const _ of instance.overConceptDescriptionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.conceptDescriptions.length);
});

test("Environment.overConceptDescriptionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  if (instance.conceptDescriptions !== null) {
    throw new Error(
      "Unexpected " +
        "conceptDescriptions !== null " +
        "in the minimal example of " +
        "Environment"
    );
  }

  let count = 0;
  for (const _ of instance.overConceptDescriptionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("DataSpecificationIec61360.overShortNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalDataSpecificationIec61360();

  if (instance.shortName === null) {
    throw new Error(
      "Unexpected " +
        "shortName === null " +
        "in the maximal example of " +
        "DataSpecificationIec61360"
    );
  }

  let count = 0;
  for (const _ of instance.overShortNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.shortName.length);
});

test("DataSpecificationIec61360.overShortNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalDataSpecificationIec61360();

  if (instance.shortName !== null) {
    throw new Error(
      "Unexpected " +
        "shortName !== null " +
        "in the minimal example of " +
        "DataSpecificationIec61360"
    );
  }

  let count = 0;
  for (const _ of instance.overShortNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("DataSpecificationIec61360.overDefinitionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadMaximalDataSpecificationIec61360();

  if (instance.definition === null) {
    throw new Error(
      "Unexpected " +
        "definition === null " +
        "in the maximal example of " +
        "DataSpecificationIec61360"
    );
  }

  let count = 0;
  for (const _ of instance.overDefinitionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(instance.definition.length);
});

test("DataSpecificationIec61360.overDefinitionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalDataSpecificationIec61360();

  if (instance.definition !== null) {
    throw new Error(
      "Unexpected " +
        "definition !== null " +
        "in the minimal example of " +
        "DataSpecificationIec61360"
    );
  }

  let count = 0;
  for (const _ of instance.overDefinitionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_for_over_X_or_empty.py
// Do NOT edit or append.
