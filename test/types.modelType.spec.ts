/**
 * Test `modelType()` methods.
 */

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_for_model_type.py
// Do NOT edit or append.

import * as AasTypes from "../src/types";
import * as AasStringification from "../src/stringification";
import * as TestCommonJsonization from "./commonJsonization";

test("model type of Extension", () => {
  const instance = TestCommonJsonization.loadMinimalExtension();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Extension);
});

test("model type from string of Extension", () => {
  const text = "Extension";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Extension);
});

test("model type to string of Extension", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Extension);

  expect(text).toStrictEqual("Extension");
});

test("model type of AdministrativeInformation", () => {
  const instance = TestCommonJsonization.loadMinimalAdministrativeInformation();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.AdministrativeInformation
  );
});

test("model type from string of AdministrativeInformation", () => {
  const text = "AdministrativeInformation";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.AdministrativeInformation);
});

test("model type to string of AdministrativeInformation", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.AdministrativeInformation
  );

  expect(text).toStrictEqual("AdministrativeInformation");
});

test("model type of Qualifier", () => {
  const instance = TestCommonJsonization.loadMinimalQualifier();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Qualifier);
});

test("model type from string of Qualifier", () => {
  const text = "Qualifier";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Qualifier);
});

test("model type to string of Qualifier", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Qualifier);

  expect(text).toStrictEqual("Qualifier");
});

test("model type of AssetAdministrationShell", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.AssetAdministrationShell
  );
});

test("model type from string of AssetAdministrationShell", () => {
  const text = "AssetAdministrationShell";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.AssetAdministrationShell);
});

test("model type to string of AssetAdministrationShell", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.AssetAdministrationShell
  );

  expect(text).toStrictEqual("AssetAdministrationShell");
});

test("model type of AssetInformation", () => {
  const instance = TestCommonJsonization.loadMinimalAssetInformation();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.AssetInformation);
});

test("model type from string of AssetInformation", () => {
  const text = "AssetInformation";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.AssetInformation);
});

test("model type to string of AssetInformation", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.AssetInformation
  );

  expect(text).toStrictEqual("AssetInformation");
});

test("model type of Resource", () => {
  const instance = TestCommonJsonization.loadMinimalResource();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Resource);
});

test("model type from string of Resource", () => {
  const text = "Resource";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Resource);
});

test("model type to string of Resource", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Resource);

  expect(text).toStrictEqual("Resource");
});

test("model type of SpecificAssetId", () => {
  const instance = TestCommonJsonization.loadMinimalSpecificAssetId();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.SpecificAssetId);
});

test("model type from string of SpecificAssetId", () => {
  const text = "SpecificAssetId";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.SpecificAssetId);
});

test("model type to string of SpecificAssetId", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.SpecificAssetId
  );

  expect(text).toStrictEqual("SpecificAssetId");
});

test("model type of Submodel", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Submodel);
});

test("model type from string of Submodel", () => {
  const text = "Submodel";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Submodel);
});

test("model type to string of Submodel", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Submodel);

  expect(text).toStrictEqual("Submodel");
});

test("model type of RelationshipElement", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.RelationshipElement);
});

test("model type from string of RelationshipElement", () => {
  const text = "RelationshipElement";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.RelationshipElement);
});

test("model type to string of RelationshipElement", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.RelationshipElement
  );

  expect(text).toStrictEqual("RelationshipElement");
});

test("model type of SubmodelElementList", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.SubmodelElementList);
});

test("model type from string of SubmodelElementList", () => {
  const text = "SubmodelElementList";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.SubmodelElementList);
});

test("model type to string of SubmodelElementList", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.SubmodelElementList
  );

  expect(text).toStrictEqual("SubmodelElementList");
});

test("model type of SubmodelElementCollection", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.SubmodelElementCollection
  );
});

test("model type from string of SubmodelElementCollection", () => {
  const text = "SubmodelElementCollection";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.SubmodelElementCollection);
});

test("model type to string of SubmodelElementCollection", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.SubmodelElementCollection
  );

  expect(text).toStrictEqual("SubmodelElementCollection");
});

test("model type of Property", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Property);
});

test("model type from string of Property", () => {
  const text = "Property";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Property);
});

test("model type to string of Property", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Property);

  expect(text).toStrictEqual("Property");
});

test("model type of MultiLanguageProperty", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.MultiLanguageProperty);
});

test("model type from string of MultiLanguageProperty", () => {
  const text = "MultiLanguageProperty";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.MultiLanguageProperty);
});

test("model type to string of MultiLanguageProperty", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.MultiLanguageProperty
  );

  expect(text).toStrictEqual("MultiLanguageProperty");
});

test("model type of Range", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Range);
});

test("model type from string of Range", () => {
  const text = "Range";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Range);
});

test("model type to string of Range", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Range);

  expect(text).toStrictEqual("Range");
});

test("model type of ReferenceElement", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.ReferenceElement);
});

test("model type from string of ReferenceElement", () => {
  const text = "ReferenceElement";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.ReferenceElement);
});

test("model type to string of ReferenceElement", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.ReferenceElement
  );

  expect(text).toStrictEqual("ReferenceElement");
});

test("model type of Blob", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Blob);
});

test("model type from string of Blob", () => {
  const text = "Blob";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Blob);
});

test("model type to string of Blob", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Blob);

  expect(text).toStrictEqual("Blob");
});

test("model type of File", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.File);
});

test("model type from string of File", () => {
  const text = "File";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.File);
});

test("model type to string of File", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.File);

  expect(text).toStrictEqual("File");
});

test("model type of AnnotatedRelationshipElement", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.AnnotatedRelationshipElement
  );
});

test("model type from string of AnnotatedRelationshipElement", () => {
  const text = "AnnotatedRelationshipElement";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.AnnotatedRelationshipElement);
});

test("model type to string of AnnotatedRelationshipElement", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.AnnotatedRelationshipElement
  );

  expect(text).toStrictEqual("AnnotatedRelationshipElement");
});

test("model type of Entity", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Entity);
});

test("model type from string of Entity", () => {
  const text = "Entity";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Entity);
});

test("model type to string of Entity", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Entity);

  expect(text).toStrictEqual("Entity");
});

test("model type of EventPayload", () => {
  const instance = TestCommonJsonization.loadMinimalEventPayload();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.EventPayload);
});

test("model type from string of EventPayload", () => {
  const text = "EventPayload";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.EventPayload);
});

test("model type to string of EventPayload", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.EventPayload
  );

  expect(text).toStrictEqual("EventPayload");
});

test("model type of BasicEventElement", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.BasicEventElement);
});

test("model type from string of BasicEventElement", () => {
  const text = "BasicEventElement";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.BasicEventElement);
});

test("model type to string of BasicEventElement", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.BasicEventElement
  );

  expect(text).toStrictEqual("BasicEventElement");
});

test("model type of Operation", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Operation);
});

test("model type from string of Operation", () => {
  const text = "Operation";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Operation);
});

test("model type to string of Operation", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Operation);

  expect(text).toStrictEqual("Operation");
});

test("model type of OperationVariable", () => {
  const instance = TestCommonJsonization.loadMinimalOperationVariable();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.OperationVariable);
});

test("model type from string of OperationVariable", () => {
  const text = "OperationVariable";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.OperationVariable);
});

test("model type to string of OperationVariable", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.OperationVariable
  );

  expect(text).toStrictEqual("OperationVariable");
});

test("model type of Capability", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Capability);
});

test("model type from string of Capability", () => {
  const text = "Capability";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Capability);
});

test("model type to string of Capability", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Capability);

  expect(text).toStrictEqual("Capability");
});

test("model type of ConceptDescription", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.ConceptDescription);
});

test("model type from string of ConceptDescription", () => {
  const text = "ConceptDescription";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.ConceptDescription);
});

test("model type to string of ConceptDescription", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.ConceptDescription
  );

  expect(text).toStrictEqual("ConceptDescription");
});

test("model type of Reference", () => {
  const instance = TestCommonJsonization.loadMinimalReference();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Reference);
});

test("model type from string of Reference", () => {
  const text = "Reference";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Reference);
});

test("model type to string of Reference", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Reference);

  expect(text).toStrictEqual("Reference");
});

test("model type of Key", () => {
  const instance = TestCommonJsonization.loadMinimalKey();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Key);
});

test("model type from string of Key", () => {
  const text = "Key";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Key);
});

test("model type to string of Key", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Key);

  expect(text).toStrictEqual("Key");
});

test("model type of LangStringNameType", () => {
  const instance = TestCommonJsonization.loadMinimalLangStringNameType();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.LangStringNameType);
});

test("model type from string of LangStringNameType", () => {
  const text = "LangStringNameType";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.LangStringNameType);
});

test("model type to string of LangStringNameType", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.LangStringNameType
  );

  expect(text).toStrictEqual("LangStringNameType");
});

test("model type of LangStringTextType", () => {
  const instance = TestCommonJsonization.loadMinimalLangStringTextType();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.LangStringTextType);
});

test("model type from string of LangStringTextType", () => {
  const text = "LangStringTextType";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.LangStringTextType);
});

test("model type to string of LangStringTextType", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.LangStringTextType
  );

  expect(text).toStrictEqual("LangStringTextType");
});

test("model type of Environment", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.Environment);
});

test("model type from string of Environment", () => {
  const text = "Environment";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.Environment);
});

test("model type to string of Environment", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.Environment);

  expect(text).toStrictEqual("Environment");
});

test("model type of EmbeddedDataSpecification", () => {
  const instance = TestCommonJsonization.loadMinimalEmbeddedDataSpecification();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.EmbeddedDataSpecification
  );
});

test("model type from string of EmbeddedDataSpecification", () => {
  const text = "EmbeddedDataSpecification";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.EmbeddedDataSpecification);
});

test("model type to string of EmbeddedDataSpecification", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.EmbeddedDataSpecification
  );

  expect(text).toStrictEqual("EmbeddedDataSpecification");
});

test("model type of LevelType", () => {
  const instance = TestCommonJsonization.loadMinimalLevelType();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.LevelType);
});

test("model type from string of LevelType", () => {
  const text = "LevelType";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.LevelType);
});

test("model type to string of LevelType", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.LevelType);

  expect(text).toStrictEqual("LevelType");
});

test("model type of ValueReferencePair", () => {
  const instance = TestCommonJsonization.loadMinimalValueReferencePair();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.ValueReferencePair);
});

test("model type from string of ValueReferencePair", () => {
  const text = "ValueReferencePair";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.ValueReferencePair);
});

test("model type to string of ValueReferencePair", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.ValueReferencePair
  );

  expect(text).toStrictEqual("ValueReferencePair");
});

test("model type of ValueList", () => {
  const instance = TestCommonJsonization.loadMinimalValueList();

  expect(instance.modelType()).toStrictEqual(AasTypes.ModelType.ValueList);
});

test("model type from string of ValueList", () => {
  const text = "ValueList";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.ValueList);
});

test("model type to string of ValueList", () => {
  const text = AasStringification.mustModelTypeToString(AasTypes.ModelType.ValueList);

  expect(text).toStrictEqual("ValueList");
});

test("model type of LangStringPreferredNameTypeIec61360", () => {
  const instance =
    TestCommonJsonization.loadMinimalLangStringPreferredNameTypeIec61360();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.LangStringPreferredNameTypeIec61360
  );
});

test("model type from string of LangStringPreferredNameTypeIec61360", () => {
  const text = "LangStringPreferredNameTypeIec61360";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.LangStringPreferredNameTypeIec61360);
});

test("model type to string of LangStringPreferredNameTypeIec61360", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.LangStringPreferredNameTypeIec61360
  );

  expect(text).toStrictEqual("LangStringPreferredNameTypeIec61360");
});

test("model type of LangStringShortNameTypeIec61360", () => {
  const instance = TestCommonJsonization.loadMinimalLangStringShortNameTypeIec61360();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.LangStringShortNameTypeIec61360
  );
});

test("model type from string of LangStringShortNameTypeIec61360", () => {
  const text = "LangStringShortNameTypeIec61360";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.LangStringShortNameTypeIec61360);
});

test("model type to string of LangStringShortNameTypeIec61360", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.LangStringShortNameTypeIec61360
  );

  expect(text).toStrictEqual("LangStringShortNameTypeIec61360");
});

test("model type of LangStringDefinitionTypeIec61360", () => {
  const instance = TestCommonJsonization.loadMinimalLangStringDefinitionTypeIec61360();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.LangStringDefinitionTypeIec61360
  );
});

test("model type from string of LangStringDefinitionTypeIec61360", () => {
  const text = "LangStringDefinitionTypeIec61360";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.LangStringDefinitionTypeIec61360);
});

test("model type to string of LangStringDefinitionTypeIec61360", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.LangStringDefinitionTypeIec61360
  );

  expect(text).toStrictEqual("LangStringDefinitionTypeIec61360");
});

test("model type of DataSpecificationIec61360", () => {
  const instance = TestCommonJsonization.loadMinimalDataSpecificationIec61360();

  expect(instance.modelType()).toStrictEqual(
    AasTypes.ModelType.DataSpecificationIec61360
  );
});

test("model type from string of DataSpecificationIec61360", () => {
  const text = "DataSpecificationIec61360";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toStrictEqual(AasTypes.ModelType.DataSpecificationIec61360);
});

test("model type to string of DataSpecificationIec61360", () => {
  const text = AasStringification.mustModelTypeToString(
    AasTypes.ModelType.DataSpecificationIec61360
  );

  expect(text).toStrictEqual("DataSpecificationIec61360");
});

test("model type from invalid string", () => {
  const text = "This is definitely not a valid model type.";
  const literal = AasStringification.modelTypeFromString(text);

  expect(literal).toBeNull();
});

test("invalid model type to string", () => {
  // The number 9007199254740991 is the maximum safe integer.
  const literal = <AasTypes.ModelType>9007199254740991;
  const text = AasStringification.modelTypeToString(literal);

  expect(text).toBeNull();
});
