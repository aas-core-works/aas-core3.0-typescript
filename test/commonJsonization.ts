/**
 * Provide functions for loading generated examples of AAS instances.
 */

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_common_jsonization.py
// Do NOT edit or append.

import * as path from "path";

import * as AasTypes from "../src/types";
import * as AasJsonization from "../src/jsonization";

import * as TestCommon from "./common";

/**
 * Load a maximal example of {@link types.Extension} from
 * the test data directory.
 */
export function loadMaximalExtension(): AasTypes.Extension {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Extension",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isExtension);

  const casted = AasTypes.asExtension(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Extension in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Extension} from
 * the test data directory.
 */
export function loadMinimalExtension(): AasTypes.Extension {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Extension",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isExtension);

  const casted = AasTypes.asExtension(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Extension in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.AdministrativeInformation} from
 * the test data directory.
 */
export function loadMaximalAdministrativeInformation(): AasTypes.AdministrativeInformation {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AdministrativeInformation",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isAdministrativeInformation);

  const casted = AasTypes.asAdministrativeInformation(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AdministrativeInformation in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.AdministrativeInformation} from
 * the test data directory.
 */
export function loadMinimalAdministrativeInformation(): AasTypes.AdministrativeInformation {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AdministrativeInformation",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isAdministrativeInformation);

  const casted = AasTypes.asAdministrativeInformation(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AdministrativeInformation in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Qualifier} from
 * the test data directory.
 */
export function loadMaximalQualifier(): AasTypes.Qualifier {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Qualifier",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isQualifier);

  const casted = AasTypes.asQualifier(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Qualifier in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Qualifier} from
 * the test data directory.
 */
export function loadMinimalQualifier(): AasTypes.Qualifier {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Qualifier",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isQualifier);

  const casted = AasTypes.asQualifier(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Qualifier in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.AssetAdministrationShell} from
 * the test data directory.
 */
export function loadMaximalAssetAdministrationShell(): AasTypes.AssetAdministrationShell {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AssetAdministrationShell",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isAssetAdministrationShell);

  const casted = AasTypes.asAssetAdministrationShell(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AssetAdministrationShell in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.AssetAdministrationShell} from
 * the test data directory.
 */
export function loadMinimalAssetAdministrationShell(): AasTypes.AssetAdministrationShell {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AssetAdministrationShell",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isAssetAdministrationShell);

  const casted = AasTypes.asAssetAdministrationShell(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AssetAdministrationShell in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.AssetInformation} from
 * the test data directory.
 */
export function loadMaximalAssetInformation(): AasTypes.AssetInformation {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AssetInformation",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isAssetInformation);

  const casted = AasTypes.asAssetInformation(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AssetInformation in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.AssetInformation} from
 * the test data directory.
 */
export function loadMinimalAssetInformation(): AasTypes.AssetInformation {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AssetInformation",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isAssetInformation);

  const casted = AasTypes.asAssetInformation(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AssetInformation in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Resource} from
 * the test data directory.
 */
export function loadMaximalResource(): AasTypes.Resource {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Resource",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isResource);

  const casted = AasTypes.asResource(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Resource in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Resource} from
 * the test data directory.
 */
export function loadMinimalResource(): AasTypes.Resource {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Resource",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isResource);

  const casted = AasTypes.asResource(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Resource in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.SpecificAssetId} from
 * the test data directory.
 */
export function loadMaximalSpecificAssetId(): AasTypes.SpecificAssetId {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "SpecificAssetId",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSpecificAssetId);

  const casted = AasTypes.asSpecificAssetId(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of SpecificAssetId in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.SpecificAssetId} from
 * the test data directory.
 */
export function loadMinimalSpecificAssetId(): AasTypes.SpecificAssetId {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "SpecificAssetId",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSpecificAssetId);

  const casted = AasTypes.asSpecificAssetId(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of SpecificAssetId in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Submodel} from
 * the test data directory.
 */
export function loadMaximalSubmodel(): AasTypes.Submodel {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Submodel",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSubmodel);

  const casted = AasTypes.asSubmodel(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Submodel in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Submodel} from
 * the test data directory.
 */
export function loadMinimalSubmodel(): AasTypes.Submodel {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Submodel",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSubmodel);

  const casted = AasTypes.asSubmodel(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Submodel in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.RelationshipElement} from
 * the test data directory.
 */
export function loadMaximalRelationshipElement(): AasTypes.RelationshipElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "RelationshipElement",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isRelationshipElement);

  const casted = AasTypes.asRelationshipElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of RelationshipElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.RelationshipElement} from
 * the test data directory.
 */
export function loadMinimalRelationshipElement(): AasTypes.RelationshipElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "RelationshipElement",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isRelationshipElement);

  const casted = AasTypes.asRelationshipElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of RelationshipElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.SubmodelElementList} from
 * the test data directory.
 */
export function loadMaximalSubmodelElementList(): AasTypes.SubmodelElementList {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "SubmodelElementList",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSubmodelElementList);

  const casted = AasTypes.asSubmodelElementList(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of SubmodelElementList in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.SubmodelElementList} from
 * the test data directory.
 */
export function loadMinimalSubmodelElementList(): AasTypes.SubmodelElementList {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "SubmodelElementList",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSubmodelElementList);

  const casted = AasTypes.asSubmodelElementList(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of SubmodelElementList in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.SubmodelElementCollection} from
 * the test data directory.
 */
export function loadMaximalSubmodelElementCollection(): AasTypes.SubmodelElementCollection {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "SubmodelElementCollection",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSubmodelElementCollection);

  const casted = AasTypes.asSubmodelElementCollection(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of SubmodelElementCollection in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.SubmodelElementCollection} from
 * the test data directory.
 */
export function loadMinimalSubmodelElementCollection(): AasTypes.SubmodelElementCollection {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "SubmodelElementCollection",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isSubmodelElementCollection);

  const casted = AasTypes.asSubmodelElementCollection(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of SubmodelElementCollection in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Property} from
 * the test data directory.
 */
export function loadMaximalProperty(): AasTypes.Property {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Property",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isProperty);

  const casted = AasTypes.asProperty(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Property in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Property} from
 * the test data directory.
 */
export function loadMinimalProperty(): AasTypes.Property {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Property",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isProperty);

  const casted = AasTypes.asProperty(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Property in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.MultiLanguageProperty} from
 * the test data directory.
 */
export function loadMaximalMultiLanguageProperty(): AasTypes.MultiLanguageProperty {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "MultiLanguageProperty",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isMultiLanguageProperty);

  const casted = AasTypes.asMultiLanguageProperty(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of MultiLanguageProperty in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.MultiLanguageProperty} from
 * the test data directory.
 */
export function loadMinimalMultiLanguageProperty(): AasTypes.MultiLanguageProperty {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "MultiLanguageProperty",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isMultiLanguageProperty);

  const casted = AasTypes.asMultiLanguageProperty(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of MultiLanguageProperty in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Range} from
 * the test data directory.
 */
export function loadMaximalRange(): AasTypes.Range {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Range",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isRange);

  const casted = AasTypes.asRange(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Range in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Range} from
 * the test data directory.
 */
export function loadMinimalRange(): AasTypes.Range {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Range",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isRange);

  const casted = AasTypes.asRange(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Range in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.ReferenceElement} from
 * the test data directory.
 */
export function loadMaximalReferenceElement(): AasTypes.ReferenceElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ReferenceElement",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isReferenceElement);

  const casted = AasTypes.asReferenceElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ReferenceElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.ReferenceElement} from
 * the test data directory.
 */
export function loadMinimalReferenceElement(): AasTypes.ReferenceElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ReferenceElement",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isReferenceElement);

  const casted = AasTypes.asReferenceElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ReferenceElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Blob} from
 * the test data directory.
 */
export function loadMaximalBlob(): AasTypes.Blob {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Blob",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isBlob);

  const casted = AasTypes.asBlob(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Blob in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Blob} from
 * the test data directory.
 */
export function loadMinimalBlob(): AasTypes.Blob {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Blob",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isBlob);

  const casted = AasTypes.asBlob(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Blob in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.File} from
 * the test data directory.
 */
export function loadMaximalFile(): AasTypes.File {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "File",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isFile);

  const casted = AasTypes.asFile(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of File in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.File} from
 * the test data directory.
 */
export function loadMinimalFile(): AasTypes.File {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "File",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isFile);

  const casted = AasTypes.asFile(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of File in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.AnnotatedRelationshipElement} from
 * the test data directory.
 */
export function loadMaximalAnnotatedRelationshipElement(): AasTypes.AnnotatedRelationshipElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AnnotatedRelationshipElement",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isAnnotatedRelationshipElement
  );

  const casted = AasTypes.asAnnotatedRelationshipElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AnnotatedRelationshipElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.AnnotatedRelationshipElement} from
 * the test data directory.
 */
export function loadMinimalAnnotatedRelationshipElement(): AasTypes.AnnotatedRelationshipElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "AnnotatedRelationshipElement",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isAnnotatedRelationshipElement
  );

  const casted = AasTypes.asAnnotatedRelationshipElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of AnnotatedRelationshipElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Entity} from
 * the test data directory.
 */
export function loadMaximalEntity(): AasTypes.Entity {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Entity",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isEntity);

  const casted = AasTypes.asEntity(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Entity in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Entity} from
 * the test data directory.
 */
export function loadMinimalEntity(): AasTypes.Entity {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Entity",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isEntity);

  const casted = AasTypes.asEntity(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Entity in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.EventPayload} from
 * the test data directory.
 */
export function loadMaximalEventPayload(): AasTypes.EventPayload {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "SelfContained",
    "Expected",
    "EventPayload",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const instanceOrError = AasJsonization.eventPayloadFromJsonable(jsonable);
  expect(instanceOrError.error).toBeNull();
  const instance = instanceOrError.mustValue();

  const casted = AasTypes.asEventPayload(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of EventPayload in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.EventPayload} from
 * the test data directory.
 */
export function loadMinimalEventPayload(): AasTypes.EventPayload {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "SelfContained",
    "Expected",
    "EventPayload",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const instanceOrError = AasJsonization.eventPayloadFromJsonable(jsonable);
  expect(instanceOrError.error).toBeNull();
  const instance = instanceOrError.mustValue();

  const casted = AasTypes.asEventPayload(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of EventPayload in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.BasicEventElement} from
 * the test data directory.
 */
export function loadMaximalBasicEventElement(): AasTypes.BasicEventElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "BasicEventElement",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isBasicEventElement);

  const casted = AasTypes.asBasicEventElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of BasicEventElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.BasicEventElement} from
 * the test data directory.
 */
export function loadMinimalBasicEventElement(): AasTypes.BasicEventElement {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "BasicEventElement",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isBasicEventElement);

  const casted = AasTypes.asBasicEventElement(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of BasicEventElement in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Operation} from
 * the test data directory.
 */
export function loadMaximalOperation(): AasTypes.Operation {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Operation",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isOperation);

  const casted = AasTypes.asOperation(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Operation in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Operation} from
 * the test data directory.
 */
export function loadMinimalOperation(): AasTypes.Operation {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Operation",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isOperation);

  const casted = AasTypes.asOperation(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Operation in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.OperationVariable} from
 * the test data directory.
 */
export function loadMaximalOperationVariable(): AasTypes.OperationVariable {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "OperationVariable",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isOperationVariable);

  const casted = AasTypes.asOperationVariable(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of OperationVariable in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.OperationVariable} from
 * the test data directory.
 */
export function loadMinimalOperationVariable(): AasTypes.OperationVariable {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "OperationVariable",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isOperationVariable);

  const casted = AasTypes.asOperationVariable(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of OperationVariable in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Capability} from
 * the test data directory.
 */
export function loadMaximalCapability(): AasTypes.Capability {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Capability",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isCapability);

  const casted = AasTypes.asCapability(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Capability in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Capability} from
 * the test data directory.
 */
export function loadMinimalCapability(): AasTypes.Capability {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Capability",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isCapability);

  const casted = AasTypes.asCapability(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Capability in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.ConceptDescription} from
 * the test data directory.
 */
export function loadMaximalConceptDescription(): AasTypes.ConceptDescription {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ConceptDescription",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isConceptDescription);

  const casted = AasTypes.asConceptDescription(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ConceptDescription in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.ConceptDescription} from
 * the test data directory.
 */
export function loadMinimalConceptDescription(): AasTypes.ConceptDescription {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ConceptDescription",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isConceptDescription);

  const casted = AasTypes.asConceptDescription(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ConceptDescription in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Reference} from
 * the test data directory.
 */
export function loadMaximalReference(): AasTypes.Reference {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Reference",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isReference);

  const casted = AasTypes.asReference(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Reference in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Reference} from
 * the test data directory.
 */
export function loadMinimalReference(): AasTypes.Reference {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Reference",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isReference);

  const casted = AasTypes.asReference(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Reference in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Key} from
 * the test data directory.
 */
export function loadMaximalKey(): AasTypes.Key {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Key",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isKey);

  const casted = AasTypes.asKey(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Key in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Key} from
 * the test data directory.
 */
export function loadMinimalKey(): AasTypes.Key {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "Key",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isKey);

  const casted = AasTypes.asKey(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Key in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.LangStringNameType} from
 * the test data directory.
 */
export function loadMaximalLangStringNameType(): AasTypes.LangStringNameType {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringNameType",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isLangStringNameType);

  const casted = AasTypes.asLangStringNameType(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringNameType in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.LangStringNameType} from
 * the test data directory.
 */
export function loadMinimalLangStringNameType(): AasTypes.LangStringNameType {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringNameType",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isLangStringNameType);

  const casted = AasTypes.asLangStringNameType(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringNameType in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.LangStringTextType} from
 * the test data directory.
 */
export function loadMaximalLangStringTextType(): AasTypes.LangStringTextType {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringTextType",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isLangStringTextType);

  const casted = AasTypes.asLangStringTextType(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringTextType in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.LangStringTextType} from
 * the test data directory.
 */
export function loadMinimalLangStringTextType(): AasTypes.LangStringTextType {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringTextType",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isLangStringTextType);

  const casted = AasTypes.asLangStringTextType(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringTextType in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.Environment} from
 * the test data directory.
 */
export function loadMaximalEnvironment(): AasTypes.Environment {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "SelfContained",
    "Expected",
    "Environment",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const instanceOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(instanceOrError.error).toBeNull();
  const instance = instanceOrError.mustValue();

  const casted = AasTypes.asEnvironment(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Environment in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.Environment} from
 * the test data directory.
 */
export function loadMinimalEnvironment(): AasTypes.Environment {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "SelfContained",
    "Expected",
    "Environment",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const instanceOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(instanceOrError.error).toBeNull();
  const instance = instanceOrError.mustValue();

  const casted = AasTypes.asEnvironment(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of Environment in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.EmbeddedDataSpecification} from
 * the test data directory.
 */
export function loadMaximalEmbeddedDataSpecification(): AasTypes.EmbeddedDataSpecification {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "EmbeddedDataSpecification",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isEmbeddedDataSpecification);

  const casted = AasTypes.asEmbeddedDataSpecification(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of EmbeddedDataSpecification in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.EmbeddedDataSpecification} from
 * the test data directory.
 */
export function loadMinimalEmbeddedDataSpecification(): AasTypes.EmbeddedDataSpecification {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "EmbeddedDataSpecification",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isEmbeddedDataSpecification);

  const casted = AasTypes.asEmbeddedDataSpecification(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of EmbeddedDataSpecification in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.LevelType} from
 * the test data directory.
 */
export function loadMaximalLevelType(): AasTypes.LevelType {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LevelType",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isLevelType);

  const casted = AasTypes.asLevelType(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LevelType in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.LevelType} from
 * the test data directory.
 */
export function loadMinimalLevelType(): AasTypes.LevelType {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LevelType",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isLevelType);

  const casted = AasTypes.asLevelType(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LevelType in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.ValueReferencePair} from
 * the test data directory.
 */
export function loadMaximalValueReferencePair(): AasTypes.ValueReferencePair {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ValueReferencePair",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isValueReferencePair);

  const casted = AasTypes.asValueReferencePair(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ValueReferencePair in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.ValueReferencePair} from
 * the test data directory.
 */
export function loadMinimalValueReferencePair(): AasTypes.ValueReferencePair {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ValueReferencePair",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isValueReferencePair);

  const casted = AasTypes.asValueReferencePair(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ValueReferencePair in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.ValueList} from
 * the test data directory.
 */
export function loadMaximalValueList(): AasTypes.ValueList {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ValueList",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isValueList);

  const casted = AasTypes.asValueList(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ValueList in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.ValueList} from
 * the test data directory.
 */
export function loadMinimalValueList(): AasTypes.ValueList {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "ValueList",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isValueList);

  const casted = AasTypes.asValueList(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of ValueList in ${aPath}, ` + `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.LangStringPreferredNameTypeIec61360} from
 * the test data directory.
 */
export function loadMaximalLangStringPreferredNameTypeIec61360(): AasTypes.LangStringPreferredNameTypeIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringPreferredNameTypeIec61360",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isLangStringPreferredNameTypeIec61360
  );

  const casted = AasTypes.asLangStringPreferredNameTypeIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringPreferredNameTypeIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.LangStringPreferredNameTypeIec61360} from
 * the test data directory.
 */
export function loadMinimalLangStringPreferredNameTypeIec61360(): AasTypes.LangStringPreferredNameTypeIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringPreferredNameTypeIec61360",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isLangStringPreferredNameTypeIec61360
  );

  const casted = AasTypes.asLangStringPreferredNameTypeIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringPreferredNameTypeIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.LangStringShortNameTypeIec61360} from
 * the test data directory.
 */
export function loadMaximalLangStringShortNameTypeIec61360(): AasTypes.LangStringShortNameTypeIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringShortNameTypeIec61360",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isLangStringShortNameTypeIec61360
  );

  const casted = AasTypes.asLangStringShortNameTypeIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringShortNameTypeIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.LangStringShortNameTypeIec61360} from
 * the test data directory.
 */
export function loadMinimalLangStringShortNameTypeIec61360(): AasTypes.LangStringShortNameTypeIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringShortNameTypeIec61360",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isLangStringShortNameTypeIec61360
  );

  const casted = AasTypes.asLangStringShortNameTypeIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringShortNameTypeIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.LangStringDefinitionTypeIec61360} from
 * the test data directory.
 */
export function loadMaximalLangStringDefinitionTypeIec61360(): AasTypes.LangStringDefinitionTypeIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringDefinitionTypeIec61360",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isLangStringDefinitionTypeIec61360
  );

  const casted = AasTypes.asLangStringDefinitionTypeIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringDefinitionTypeIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.LangStringDefinitionTypeIec61360} from
 * the test data directory.
 */
export function loadMinimalLangStringDefinitionTypeIec61360(): AasTypes.LangStringDefinitionTypeIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "LangStringDefinitionTypeIec61360",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(
    container,
    AasTypes.isLangStringDefinitionTypeIec61360
  );

  const casted = AasTypes.asLangStringDefinitionTypeIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of LangStringDefinitionTypeIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a maximal example of {@link types.DataSpecificationIec61360} from
 * the test data directory.
 */
export function loadMaximalDataSpecificationIec61360(): AasTypes.DataSpecificationIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "DataSpecificationIec61360",
    "maximal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isDataSpecificationIec61360);

  const casted = AasTypes.asDataSpecificationIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of DataSpecificationIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

/**
 * Load a minimal example of {@link types.DataSpecificationIec61360} from
 * the test data directory.
 */
export function loadMinimalDataSpecificationIec61360(): AasTypes.DataSpecificationIec61360 {
  const aPath = path.join(
    TestCommon.TEST_DATA_DIR,
    "Json",
    "ContainedInEnvironment",
    "Expected",
    "DataSpecificationIec61360",
    "minimal.json"
  );

  const jsonable = TestCommon.readJsonFromFileSync(aPath);

  const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
  expect(containerOrError.error).toBeNull();
  const container = containerOrError.mustValue();
  const instance = TestCommon.mustFind(container, AasTypes.isDataSpecificationIec61360);

  const casted = AasTypes.asDataSpecificationIec61360(instance);
  if (casted === null) {
    throw new Error(
      `Expected instance of DataSpecificationIec61360 in ${aPath}, ` +
        `but got: ${typeof instance}`
    );
  }
  return casted;
}

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_common_jsonization.py
// Do NOT edit or append.
