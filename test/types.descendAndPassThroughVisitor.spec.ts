/**
 * Test `descend*` functions and `PassThroughVisitor`.
 */

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_for_descend_and_pass_through_visitor.py
// Do NOT edit or append.

import * as path from "path";
import * as fs from "fs";

import * as AasTypes from "../src/types";
import * as TestCommon from "./common";
import * as TestCommonJsonization from "./commonJsonization";

/**
 * Record a human-readable trace of a descent over an object tree.
 */
class TracingVisitor extends AasTypes.PassThroughVisitor {
  readonly log = new Array<string>();

  visit(that: AasTypes.Class) {
    this.log.push(TestCommon.traceMark(that));
    super.visit(that);
  }
}

/**
 * Expect that the trace from {@link types.Class.descend} and
 * {@link TracingVisitor} are equal.
 *
 * @param instance - to be descended through
 * @throws an {@link Error} if the two traces are not equal
 */
function expectDescendAndPassThroughVisitorSame(instance: AasTypes.Class): void {
  const traceFromDescend = new Array<string>();
  for (const subInstance of instance.descend()) {
    traceFromDescend.push(TestCommon.traceMark(subInstance));
  }

  const visitor = new TracingVisitor();
  visitor.visit(instance);
  const traceFromVisitor = visitor.log;

  expect(traceFromVisitor.length).toBeGreaterThan(0);
  expect(TestCommon.traceMark(instance)).toStrictEqual(traceFromVisitor[0]);

  traceFromVisitor.shift();

  expect(traceFromVisitor).toStrictEqual(traceFromDescend);
}

/**
 * Compare the trace against the golden one from the test data,
 * or re-record the trace if {@link common.RECORD_MODE}.
 *
 * @param instance - to be traced
 * @param expectedPath - path to the golden trace
 */
function compareOrRecordTrace(instance: AasTypes.Class, expectedPath: string) {
  const lines = new Array<string>();
  for (const descendant of instance.descend()) {
    lines.push(TestCommon.traceMark(descendant));
  }
  // NOTE (mristin, 2022-12-09):
  // We add a new line for POSIX systems which prefer a new line
  // at the end of the file.
  lines.push("");
  const got = lines.join("\n");

  if (TestCommon.RECORD_MODE) {
    const parent = path.dirname(expectedPath);
    if (!fs.existsSync(parent)) {
      fs.mkdirSync(parent, { recursive: true });
    }
    fs.writeFileSync(expectedPath, got, "utf-8");
  } else {
    if (!fs.existsSync(expectedPath)) {
      throw new Error(
        `The file with the recorded trace does not exist: ${expectedPath}`
      );
    }

    const expected = fs.readFileSync(expectedPath, "utf-8").replace(/\r\n/g, "\n");
    expect(got).toStrictEqual(expected);
  }
}

test("descend of Extension", () => {
  const instance = TestCommonJsonization.loadMaximalExtension();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Extension", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalExtension();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of AdministrativeInformation", () => {
  const instance = TestCommonJsonization.loadMaximalAdministrativeInformation();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "AdministrativeInformation",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalAdministrativeInformation();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Qualifier", () => {
  const instance = TestCommonJsonization.loadMaximalQualifier();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Qualifier", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalQualifier();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of AssetAdministrationShell", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "AssetAdministrationShell",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalAssetAdministrationShell();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of AssetInformation", () => {
  const instance = TestCommonJsonization.loadMaximalAssetInformation();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "AssetInformation",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalAssetInformation();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Resource", () => {
  const instance = TestCommonJsonization.loadMaximalResource();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Resource", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalResource();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of SpecificAssetId", () => {
  const instance = TestCommonJsonization.loadMaximalSpecificAssetId();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "SpecificAssetId",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalSpecificAssetId();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Submodel", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Submodel", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodel();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of RelationshipElement", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "RelationshipElement",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalRelationshipElement();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of SubmodelElementList", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "SubmodelElementList",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementList();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of SubmodelElementCollection", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "SubmodelElementCollection",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalSubmodelElementCollection();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Property", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Property", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalProperty();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of MultiLanguageProperty", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "MultiLanguageProperty",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalMultiLanguageProperty();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Range", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Range", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalRange();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of ReferenceElement", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "ReferenceElement",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalReferenceElement();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Blob", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Blob", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalBlob();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of File", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "File", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalFile();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of AnnotatedRelationshipElement", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "AnnotatedRelationshipElement",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalAnnotatedRelationshipElement();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Entity", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Entity", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalEntity();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of EventPayload", () => {
  const instance = TestCommonJsonization.loadMaximalEventPayload();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "EventPayload", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalEventPayload();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of BasicEventElement", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "BasicEventElement",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalBasicEventElement();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Operation", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Operation", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalOperation();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of OperationVariable", () => {
  const instance = TestCommonJsonization.loadMaximalOperationVariable();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "OperationVariable",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalOperationVariable();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Capability", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Capability", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalCapability();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of ConceptDescription", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "ConceptDescription",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalConceptDescription();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Reference", () => {
  const instance = TestCommonJsonization.loadMaximalReference();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Reference", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalReference();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Key", () => {
  const instance = TestCommonJsonization.loadMaximalKey();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Key", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalKey();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of LangStringNameType", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringNameType();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "LangStringNameType",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringNameType();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of LangStringTextType", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringTextType();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "LangStringTextType",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringTextType();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of Environment", () => {
  const instance = TestCommonJsonization.loadMaximalEnvironment();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "Environment", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalEnvironment();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of EmbeddedDataSpecification", () => {
  const instance = TestCommonJsonization.loadMaximalEmbeddedDataSpecification();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "EmbeddedDataSpecification",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalEmbeddedDataSpecification();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of LevelType", () => {
  const instance = TestCommonJsonization.loadMaximalLevelType();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "LevelType", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalLevelType();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of ValueReferencePair", () => {
  const instance = TestCommonJsonization.loadMaximalValueReferencePair();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "ValueReferencePair",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalValueReferencePair();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of ValueList", () => {
  const instance = TestCommonJsonization.loadMaximalValueList();

  compareOrRecordTrace(
    instance,
    path.join(TestCommon.TEST_DATA_DIR, "descend", "ValueList", "maximal.json.trace")
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalValueList();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of LangStringPreferredNameTypeIec61360", () => {
  const instance =
    TestCommonJsonization.loadMaximalLangStringPreferredNameTypeIec61360();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "LangStringPreferredNameTypeIec61360",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance =
    TestCommonJsonization.loadMaximalLangStringPreferredNameTypeIec61360();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of LangStringShortNameTypeIec61360", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringShortNameTypeIec61360();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "LangStringShortNameTypeIec61360",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringShortNameTypeIec61360();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of LangStringDefinitionTypeIec61360", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringDefinitionTypeIec61360();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "LangStringDefinitionTypeIec61360",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalLangStringDefinitionTypeIec61360();

  expectDescendAndPassThroughVisitorSame(instance);
});

test("descend of DataSpecificationIec61360", () => {
  const instance = TestCommonJsonization.loadMaximalDataSpecificationIec61360();

  compareOrRecordTrace(
    instance,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "descend",
      "DataSpecificationIec61360",
      "maximal.json.trace"
    )
  );
});

test("descend against PassThroughVisitor", () => {
  const instance = TestCommonJsonization.loadMaximalDataSpecificationIec61360();

  expectDescendAndPassThroughVisitorSame(instance);
});

// This code has been automatically generated by:
// dev_scripts/test_codegen/generate_test_for_descend_and_pass_through_visitor.py
// Do NOT edit or append.
